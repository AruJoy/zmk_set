/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include "mouse.dtsi"
#define AS(keycode) &as LS(keycode) keycode  

#define BASE 0
#define NAV 1
#define MUS 2
#define NUM 3
#define FUN 4
#define MBASE 5
#define MNAV 6
#define MMUS 7
#define MNUM 8
#define MFUN 9

#define XXX &none
#define TRN &trans

/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E      &kp R  &kp T          &kp Y      &kp U         &kp I      &kp O    &kp P              &kp BSPC
&mo 3      &kp A  &kp S  &kp D      &kp F  &kp G          &kp H      &kp J         &kp K      &kp L    &kp SEMICOLON      &kp ENTER
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V  &kp B          &kp N      &kp M         &kp COMMA  &kp DOT  &kp FSLH           &kp RSHIFT
                         &kp LGUI  &mo 2  &lt 1 SPACE    &kp SPACE  &kp CAPSLOCK  &kp RIGHT_ALT
            >;
        };

        layer_1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC    &trans  &trans  &trans  &trans  &trans    &kp PAGE_UP    &kp HOME        &kp UP_ARROW    &kp END          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&trans     &trans  &trans  &trans  &trans  &trans    &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LEFT_BRACKET      &kp RIGHT_BRACKET
&kp LSHFT  &trans  &trans  &trans  &trans  &trans    &trans         &trans          &trans          &trans           &trans                &kp RIGHT_SHIFT
                           &trans  &trans  &trans    &trans         &trans          &trans
            >;
        };

        layer_2 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5          &kp NUMBER_6    &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &kp MINUS      &kp PLUS
&kp GRAVE     &trans        &trans        &trans        &trans          &trans          &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp SLASH     &kp BACKSLASH  &kp EQUAL
&kp LSHIFT    &trans        &trans        &trans        &bt BT_CLR_ALL  &bt BT_SEL 0    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_3  &kp AMPERSAND  &kp RIGHT_SHIFT
                                          &trans        &trans          &trans          &trans        &kp N0        &sk K_CALC
            >;
        };

        layer_3 {
            bindings = <
&trans       &trans       &sk K_PREV    &sk C_PLAY  &sk K_NEXT            &trans     &msc SCROLL_UP      &msc SCROLL_LEFT     &mmv MOVE_UP    &msc SCROLL_RIGHT  &trans   &trans 
&trans       &trans       &mkp RCLK     &mkp LCLK   &kp LS(LG(NUMBER_4))  &trans     &msc SCROLL_DOWN    &mmv MOVE_LEFT       &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp DOUBLE_QUOTES   &trans 
&trans       &trans       &sk C_VOL_DN  &sk K_MUTE  &sk C_VOL_UP          &trans     &trans              &trans               &trans          &trans           &trans   &trans
                                        &trans      &trans                &trans     &mkp LCLK           &mkp RCLK            &trans
            >;
        };
    };
};